{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetchData","watchFetchData","rootSaga","getData","fetch","then","response","json","data","catch","error","action","regenerator_default","a","wrap","_context","prev","next","call","sent","put","type","t0","stop","_marked","this","_context2","takeLatest","_marked2","_context3","all","_marked3","sagaMiddleware","createSagaMiddleware","store","createStore","state","arguments","length","undefined","applyMiddleware","run","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","foo","_this$props","onFoo","react_default","createElement","onClick","keys","books","Component","AppC","connect","dispatch","AppR","react_redux_es","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32965b27.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport { put, all, call, takeLatest} from 'redux-saga/effects'\nimport './App.css';\n\nconst getData = () => fetch(\"https://xavierdpt.github.io/data/data.js\").then(\n  response => response.json().then(\n    data => data\n  )\n).catch(\n  error => { throw error; }\n);\n\nfunction* fetchData(action) {\n   try {\n      const data = yield call(getData)\n      yield put({type: \"DATA\", data})\n   } catch (error) {\n      yield put({type: \"DATA_FAILED\", error})\n   }\n}\n\nfunction* watchFetchData() {\n  yield takeLatest('DATA_REQUESTED', fetchData)\n}\n\nfunction* rootSaga() {\n  yield all([\n\twatchFetchData()\n  ])\n}\n\nfunction reducer(state = null, action) {\n  switch (action.type) {\n    case 'DATA':\n      return action.data;\n    default:\n      return state\n  }\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n   reducer,\n   applyMiddleware(sagaMiddleware),\n);\n\n\nsagaMiddleware.run(rootSaga);\n\nconst action = type => store.dispatch({type})\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.foo = ()=>{\n\t\t\t\n\t\t}\n\t}\n  render() {\n\tconst {data, onFoo} = this.props;\n    return (\n      <div>\n\t\t<div>Tigger</div>\n\t\t<div><button onClick={onFoo}>Get Data</button></div>\n\t\t{data?<div>{Object.keys(data.books).length} books</div>:<div>No data</div>}\n\t</div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  data: state\n})\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFoo: () => action('DATA_REQUESTED')\n  }\n}\n\nconst AppC = connect(mapStateToProps,mapDispatchToProps)(App)\n\nclass AppR extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <AppC />\n      </Provider>\n    );\n  }\n}\n\nexport default AppR;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}